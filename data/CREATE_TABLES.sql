DROP TABLE images;
DROP TABLE bans;
DROP TABLE purchase_product;
DROP TABLE spec_table;
DROP TABLE purchase;
DROP TABLE review;
DROP TABLE comments;
DROP TABLE bundle_products;
DROP TABLE users;
DROP TABLE bundles;
DROP TABLE products;

-- Create tables

CREATE TABLE products (
    id INT GENERATED BY DEFAULT AS IDENTITY START WITH 10000 INCREMENT BY 1, 
    name VARCHAR2(256),
    base_price NUMBER(7, 0) NOT NULL, 
    discount NUMBER(5, 2), 
    rating NUMBER(2, 1) DEFAULT 0.0, 
    category VARCHAR2(32),
    subcategory VARCHAR2(32),
    brand VARCHAR2(32),
    stock INT, 
    PRIMARY KEY(id)
);

CREATE TABLE bundles (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR2(256), 
    PRIMARY KEY(id)
);

CREATE TABLE bundle_products (
    bundle_id INT, 
    product_id INT, 
    PRIMARY KEY(bundle_id, product_id), 
    FOREIGN KEY(bundle_id) REFERENCES bundles(id),
    FOREIGN KEY(product_id) REFERENCES products(id)
);

CREATE TABLE images (
    product_id INT, 
    img_url VARCHAR2(256) NOT NULL, 
    PRIMARY KEY(product_id, img_url),
    FOREIGN KEY(product_id) REFERENCES products(id) ON DELETE CASCADE
);

CREATE TABLE users (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR2(256), 
    last_name VARCHAR2(256), 
    email VARCHAR2(256), 
    pass_word VARCHAR2(256), 
    phone_number VARCHAR2(256),
    user_address VARCHAR2(256), 
    PRIMARY KEY(id)
);

CREATE TABLE review (
	review_id INT GENERATED BY DEFAULT AS IDENTITY,
	product_id INT,
	user_id INT,
	rating INT,
	text VARCHAR2(256),
	PRIMARY KEY(review_id), 
	FOREIGN KEY(product_id) REFERENCES products(id) ON DELETE CASCADE,
	FOREIGN KEY(user_id) REFERENCES users(id)
);


CREATE TABLE bans (
    email VARCHAR2(256),
	ban_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    PRIMARY KEY(email)
);

create table comments(
	comment_id INT GENERATED BY DEFAULT AS IDENTITY, 
    product_id INT,
    comment_on INT,
    user_id INT,
	text varchar2(256),
	comment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    PRIMARY KEY(comment_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE,
    FOREIGN KEY (comment_on) REFERENCES comments(comment_id) ON DELETE CASCADE
);

CREATE TABLE purchase (
    purchase_id INT GENERATED BY DEFAULT AS IDENTITY, 
    purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    approval_date TIMESTAMP DEFAULT NULL, 
    payment_info VARCHAR2(256), 
    address VARCHAR2(256), 
    bought_by INT, 
    PRIMARY KEY(purchase_id),
    FOREIGN KEY (bought_by) REFERENCES users(id) ON DELETE SET NULL
);

create table purchase_product(
    purchase_id INT,
    product_id INT,
    product_count INT,
    PRIMARY KEY(purchase_id, product_id),
    FOREIGN KEY (purchase_id) REFERENCES purchase(purchase_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
);

CREATE TABLE spec_table (
    attr_name VARCHAR2(50) NOT NULL,
    attr_value VARCHAR2(200), 
    product_id INT NOT NULL,
    FOREIGN KEY(product_id) REFERENCES products(id) ON DELETE CASCADE,
    PRIMARY KEY(attr_name, product_id)
);

-- Procedures

CREATE OR REPLACE PROCEDURE delete_and_ban_user(USER_ID IN INT, IS_SUCCESS OUT INT) IS
    EMAIL VARCHAR2(256);
BEGIN
    SET TRANSACTION READ WRITE;
    SELECT EMAIL INTO EMAIL FROM USERS WHERE ID = USER_ID;
    DELETE FROM USERS WHERE ID = USER_ID;
    INSERT INTO BANS (EMAIL) VALUES (EMAIl);
    COMMIT;
    IS_SUCCESS := 1;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        IS_SUCCESS := 0;
END;
/

-- Functions

CREATE OR REPLACE FUNCTION is_email_registrable(input_email IN VARCHAR2)
RETURN INT IS
    existing_email_count INT;
BEGIN
    SELECT COUNT(*) INTO existing_email_count FROM users
    WHERE users.email = input_email;

    IF existing_email_count != 0 THEN
        RETURN 0;
    END IF;
    
    SELECT COUNT(*) INTO existing_email_count FROM BANS
    WHERE bans.email = input_email;

    IF existing_email_count != 0 THEN
        RETURN 0; 
    END IF;

    RETURN 1;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 0;
END;
/

-- Triggers

CREATE OR REPLACE TRIGGER update_stock
AFTER INSERT ON purchase_product
FOR EACH ROW
BEGIN
    UPDATE products 
    SET stock = stock - :NEW.product_count
    WHERE id = :NEW.product_id;
END;
/

CREATE OR REPLACE TRIGGER update_rating 
BEFORE INSERT ON review
FOR EACH ROW 
DECLARE
    updated_pid NUMBER;
    new_rating NUMBER;
    old_rating NUMBER;
    cnt NUMBER;
BEGIN
    updated_pid := :NEW.product_id;
    new_rating := :NEW.rating;

    SELECT AVG(RATING) INTO old_rating FROM review WHERE product_id = updated_pid;
    SELECT COUNT(*) INTO cnt FROM review WHERE product_id = updated_pid;
    UPDATE products SET rating = (old_rating*cnt + new_rating)/(cnt+1) WHERE id = updated_pid;
END;
/